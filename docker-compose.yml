services:
  frontend:
    build:
      context: ./src
      dockerfile: client/Dockerfile
      args:
        - VITE_API_BASE_URL=http://localhost:8080
    container_name: "frontend"
    ports:
      - "3000:3000"
    depends_on:
      - gateway
    environment:
      - VITE_API_BASE_URL=http://localhost:8080
      - VITE_SIGNALR_URL=http://localhost:8080/videocall

  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: "rabbitmq"
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 15s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: "redis"
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s
    restart: unless-stopped

  gateway:
    build:
      context: ./src
      dockerfile: services/Gateway/Dockerfile
    container_name: "gateway"
    depends_on:
      rabbitmq:
        condition: service_healthy
      userservice:
        condition: service_started
      skillservice:
        condition: service_started
      matchmakingservice:
        condition: service_started
      appointmentservice:
        condition: service_started
      videocallservice:
        condition: service_started
      notificationservice:
        condition: service_started
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - RABBITMQ_HOST=rabbitmq
      - USERSERVICE_URL=http://userservice:5001
      - SKILLSERVICE_URL=http://skillservice:5002
      - MATCHMAKINGSERVICE_URL=http://matchmakingservice:5003
      - APPOINTMENTSERVICE_URL=http://appointmentservice:5004
      - VIDEOCALLSERVICE_URL=http://videocallservice:5005
      - NOTIFICATIONSERVICE_URL=http://notificationservice:5006
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ISSUER=${JWT_ISSUER}
      - JWT_AUDIENCE=${JWT_AUDIENCE}
      - ALLOWED_ORIGINS=http://localhost:3000
    restart: unless-stopped

  # ================== Services ==================

  userservice:
    build:
      context: ./src
      dockerfile: services/UserService/UserService.Api/Dockerfile
    container_name: "userservice"
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres_userservice:
        condition: service_healthy
    ports:
      - "5001:5001"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5001
      - DOTNET_RUNNING_IN_CONTAINER=true
      - RABBITMQ_HOST=rabbitmq
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ISSUER=${JWT_ISSUER}
      - JWT_AUDIENCE=${JWT_AUDIENCE}
      - JWT_EXPIRE=${JWT_EXPIRE}
      - REDIS_CONNECTION_STRING=redis:6379
      - ConnectionStrings__DefaultConnection=Host=postgres_userservice;Database=userservice;Username=${POSTGRES_USER:-skillswap};Password=${POSTGRES_PASSWORD:-skillswap@ditss1990?!};Port=5432;TrustServerCertificate=True;
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  skillservice:
    build:
      context: ./src
      dockerfile: services/SkillService/Dockerfile
    container_name: "skillservice"
    depends_on:
      postgres_skillservice:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "5002:5002"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5002
      - DOTNET_RUNNING_IN_CONTAINER=true
      - RABBITMQ_HOST=rabbitmq
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ISSUER=${JWT_ISSUER}
      - JWT_AUDIENCE=${JWT_AUDIENCE}
      - JWT_EXPIRE=${JWT_EXPIRE}
      - REDIS_CONNECTION_STRING=redis:6379
      - ConnectionStrings__DefaultConnection=Host=postgres_skillservice;Database=skillservice;Username=${POSTGRES_USER:-skillswap};Password=${POSTGRES_PASSWORD:-skillswap@ditss1990?!};Port=5432;TrustServerCertificate=True;
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  matchmakingservice:
    build:
      context: ./src
      dockerfile: services/MatchmakingService/Dockerfile
    container_name: "matchmakingservice"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres_matchmakingservice:
        condition: service_healthy
    ports:
      - "5003:5003"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5003
      - DOTNET_RUNNING_IN_CONTAINER=true
      - RABBITMQ_HOST=rabbitmq
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ISSUER=${JWT_ISSUER}
      - JWT_AUDIENCE=${JWT_AUDIENCE}
      - JWT_EXPIRE=${JWT_EXPIRE}
      - REDIS_CONNECTION_STRING=redis:6379
      - ConnectionStrings__DefaultConnection=Host=postgres_matchmakingservice;Database=matchmakingservice;Username=${POSTGRES_USER:-skillswap};Password=${POSTGRES_PASSWORD:-skillswap@ditss1990?!};Port=5432;TrustServerCertificate=True;
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  appointmentservice:
    build:
      context: ./src
      dockerfile: services/AppointmentService/Dockerfile
    container_name: "appointmentservice"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres_appointmentservice:
        condition: service_healthy
    ports:
      - "5004:5004"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5004
      - DOTNET_RUNNING_IN_CONTAINER=true
      - RABBITMQ_HOST=rabbitmq
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ISSUER=${JWT_ISSUER}
      - JWT_AUDIENCE=${JWT_AUDIENCE}
      - JWT_EXPIRE=${JWT_EXPIRE}
      - REDIS_CONNECTION_STRING=redis:6379
      - ConnectionStrings__DefaultConnection=Host=postgres_appointmentservice;Database=appointmentservice;Username=${POSTGRES_USER:-skillswap};Password=${POSTGRES_PASSWORD:-skillswap@ditss1990?!};Port=5432;TrustServerCertificate=True;
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5004/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  videocallservice:
    build:
      context: ./src
      dockerfile: services/VideocallService/Dockerfile
    container_name: "videocallservice"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres_videocallservice:
        condition: service_healthy
    ports:
      - "5005:5005"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5005
      - DOTNET_RUNNING_IN_CONTAINER=true
      - RABBITMQ_HOST=rabbitmq
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ISSUER=${JWT_ISSUER}
      - JWT_AUDIENCE=${JWT_AUDIENCE}
      - JWT_EXPIRE=${JWT_EXPIRE}
      - REDIS_CONNECTION_STRING=redis:6379
      - ConnectionStrings__DefaultConnection=Host=postgres_videocallservice;Database=videocallservice;Username=${POSTGRES_USER:-skillswap};Password=${POSTGRES_PASSWORD:-skillswap@ditss1990?!};Port=5432;TrustServerCertificate=True;
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  notificationservice:
    build:
      context: ./src
      dockerfile: services/NotificationService/Dockerfile
    container_name: "notificationservice"
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres_notificationservice:
        condition: service_healthy
    ports:
      - "5006:5006"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5006
      - DOTNET_RUNNING_IN_CONTAINER=true
      - RABBITMQ_HOST=rabbitmq
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ISSUER=${JWT_ISSUER}
      - JWT_AUDIENCE=${JWT_AUDIENCE}
      - JWT_EXPIRE=${JWT_EXPIRE}
      - REDIS_CONNECTION_STRING=redis:6379
      - ConnectionStrings__DefaultConnection=Host=postgres_notificationservice;Database=notificationservice;Username=${POSTGRES_USER:-skillswap};Password=${POSTGRES_PASSWORD:-skillswap@ditss1990?!};Port=5432;TrustServerCertificate=True;
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_USE_SSL=${SMTP_USE_SSL:-true}
      - SMS_PROVIDER=${SMS_PROVIDER:-twilio}
      - SMS_API_KEY=${SMS_API_KEY}
      - SMS_API_SECRET=${SMS_API_SECRET}
      - SMS_FROM_NUMBER=${SMS_FROM_NUMBER}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/secrets/firebase-key.json
    volumes:
      - ./secrets/firebase-key.json:/app/secrets/firebase-key.json:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5006/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # ================== Postgres pro Service ==================

  postgres_userservice:
    image: postgres:15-alpine
    container_name: "postgres_userservice"
    environment:
      POSTGRES_DB: userservice
      POSTGRES_USER: ${POSTGRES_USER:-skillswap}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-skillswap@ditss1990?!}
    volumes:
      - postgres_userservice_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-skillswap} -d userservice"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  postgres_skillservice:
    image: postgres:15-alpine
    container_name: "postgres_skillservice"
    environment:
      POSTGRES_DB: skillservice
      POSTGRES_USER: ${POSTGRES_USER:-skillswap}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-skillswap@ditss1990?!}
    volumes:
      - postgres_skillservice_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-skillswap} -d skillservice"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  postgres_matchmakingservice:
    image: postgres:15-alpine
    container_name: "postgres_matchmakingservice"
    environment:
      POSTGRES_DB: matchmakingservice
      POSTGRES_USER: ${POSTGRES_USER:-skillswap}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-skillswap@ditss1990?!}
    volumes:
      - postgres_matchmakingservice_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-skillswap} -d matchmakingservice"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  postgres_appointmentservice:
    image: postgres:15-alpine
    container_name: "postgres_appointmentservice"
    environment:
      POSTGRES_DB: appointmentservice
      POSTGRES_USER: ${POSTGRES_USER:-skillswap}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-skillswap@ditss1990?!}
    volumes:
      - postgres_appointmentservice_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-skillswap} -d appointmentservice"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  postgres_videocallservice:
    image: postgres:15-alpine
    container_name: "postgres_videocallservice"
    environment:
      POSTGRES_DB: videocallservice
      POSTGRES_USER: ${POSTGRES_USER:-skillswap}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-skillswap@ditss1990?!}
    volumes:
      - postgres_videocallservice_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-skillswap} -d videocallservice"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  postgres_notificationservice:
    image: postgres:15-alpine
    container_name: "postgres_notificationservice"
    environment:
      POSTGRES_DB: notificationservice
      POSTGRES_USER: ${POSTGRES_USER:-skillswap}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-skillswap@ditss1990?!}
    volumes:
      - postgres_notificationservice_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-skillswap} -d notificationservice"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  redis_data:
    name: skillswap_redis_data
  rabbitmq_data:
    name: skillswap_rabbitmq_data

  postgres_userservice_data:
    name: skillswap_pg_userservice
  postgres_skillservice_data:
    name: skillswap_pg_skillservice
  postgres_matchmakingservice_data:
    name: skillswap_pg_matchmakingservice
  postgres_appointmentservice_data:
    name: skillswap_pg_appointmentservice
  postgres_videocallservice_data:
    name: skillswap_pg_videocallservice
  postgres_notificationservice_data:
    name: skillswap_pg_notificationservice
