# docker-compose.yml
# Base configuration for SkillSwap microservices
# This file contains the core service definitions without environment-specific settings

services:
  # ================== Frontend ==================
  frontend:
    build:
      context: ./src
      dockerfile: client/Dockerfile
      args:
        - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:8080}
    container_name: "skillswap-frontend"
    networks:
      - skillswap-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M

  # ================== Infrastructure ==================
  rabbitmq:
    image: "rabbitmq:3-management-alpine"
    container_name: "skillswap-rabbitmq"
    networks:
      - skillswap-network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 15s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  redis:
    image: redis:7-alpine
    container_name: "skillswap-redis"
    networks:
      - skillswap-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

  # ================== API Gateway ==================
  gateway:
    build:
      context: ./src
      dockerfile: services/Gateway/Dockerfile
    container_name: "skillswap-gateway"
    depends_on:
      rabbitmq:
        condition: service_healthy
      userservice:
        condition: service_started
      skillservice:
        condition: service_started
      matchmakingservice:
        condition: service_started
      appointmentservice:
        condition: service_started
      videocallservice:
        condition: service_started
      notificationservice:
        condition: service_started
    networks:
      - skillswap-network
    environment:
      - ASPNETCORE_URLS=http://+:8080
      - RABBITMQ_HOST=rabbitmq
      - USERSERVICE_URL=http://userservice:5001
      - SKILLSERVICE_URL=http://skillservice:5002
      - MATCHMAKINGSERVICE_URL=http://matchmakingservice:5003
      - APPOINTMENTSERVICE_URL=http://appointmentservice:5004
      - VIDEOCALLSERVICE_URL=http://videocallservice:5005
      - NOTIFICATIONSERVICE_URL=http://notificationservice:5006
      - JWT_ISSUER=${JWT_ISSUER:-SkillSwap}
      - JWT_AUDIENCE=${JWT_AUDIENCE:-SkillSwap}
      - ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000}
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # ================== Microservices ==================
  userservice:
    build:
      context: ./src
      dockerfile: services/UserService/UserService.Api/Dockerfile
    container_name: "skillswap-userservice"
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres_userservice:
        condition: service_healthy
    networks:
      - skillswap-network
    environment:
      - ASPNETCORE_URLS=http://+:5001
      - DOTNET_RUNNING_IN_CONTAINER=true
      - RABBITMQ_HOST=rabbitmq
      - JWT_ISSUER=${JWT_ISSUER:-SkillSwap}
      - JWT_AUDIENCE=${JWT_AUDIENCE:-SkillSwap}
      - JWT_EXPIRE=${JWT_EXPIRE:-60}
      - REDIS_CONNECTION_STRING=redis:6379
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  skillservice:
    build:
      context: ./src
      dockerfile: services/SkillService/Dockerfile
    container_name: "skillswap-skillservice"
    depends_on:
      postgres_skillservice:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - skillswap-network
    environment:
      - ASPNETCORE_URLS=http://+:5002
      - DOTNET_RUNNING_IN_CONTAINER=true
      - RABBITMQ_HOST=rabbitmq
      - JWT_ISSUER=${JWT_ISSUER:-SkillSwap}
      - JWT_AUDIENCE=${JWT_AUDIENCE:-SkillSwap}
      - JWT_EXPIRE=${JWT_EXPIRE:-60}
      - REDIS_CONNECTION_STRING=redis:6379
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  matchmakingservice:
    build:
      context: ./src
      dockerfile: services/MatchmakingService/Dockerfile
    container_name: "skillswap-matchmakingservice"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres_matchmakingservice:
        condition: service_healthy
    networks:
      - skillswap-network
    environment:
      - ASPNETCORE_URLS=http://+:5003
      - DOTNET_RUNNING_IN_CONTAINER=true
      - RABBITMQ_HOST=rabbitmq
      - JWT_ISSUER=${JWT_ISSUER:-SkillSwap}
      - JWT_AUDIENCE=${JWT_AUDIENCE:-SkillSwap}
      - JWT_EXPIRE=${JWT_EXPIRE:-60}
      - REDIS_CONNECTION_STRING=redis:6379
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  appointmentservice:
    build:
      context: ./src
      dockerfile: services/AppointmentService/Dockerfile
    container_name: "skillswap-appointmentservice"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres_appointmentservice:
        condition: service_healthy
    networks:
      - skillswap-network
    environment:
      - ASPNETCORE_URLS=http://+:5004
      - DOTNET_RUNNING_IN_CONTAINER=true
      - RABBITMQ_HOST=rabbitmq
      - JWT_ISSUER=${JWT_ISSUER:-SkillSwap}
      - JWT_AUDIENCE=${JWT_AUDIENCE:-SkillSwap}
      - JWT_EXPIRE=${JWT_EXPIRE:-60}
      - REDIS_CONNECTION_STRING=redis:6379
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5004/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  videocallservice:
    build:
      context: ./src
      dockerfile: services/VideocallService/Dockerfile
    container_name: "skillswap-videocallservice"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres_videocallservice:
        condition: service_healthy
    networks:
      - skillswap-network
    environment:
      - ASPNETCORE_URLS=http://+:5005
      - DOTNET_RUNNING_IN_CONTAINER=true
      - RABBITMQ_HOST=rabbitmq
      - JWT_ISSUER=${JWT_ISSUER:-SkillSwap}
      - JWT_AUDIENCE=${JWT_AUDIENCE:-SkillSwap}
      - JWT_EXPIRE=${JWT_EXPIRE:-60}
      - REDIS_CONNECTION_STRING=redis:6379
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  notificationservice:
    build:
      context: ./src
      dockerfile: services/NotificationService/Dockerfile
    container_name: "skillswap-notificationservice"
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres_notificationservice:
        condition: service_healthy
    networks:
      - skillswap-network
    environment:
      - ASPNETCORE_URLS=http://+:5006
      - DOTNET_RUNNING_IN_CONTAINER=true
      - RABBITMQ_HOST=rabbitmq
      - JWT_ISSUER=${JWT_ISSUER:-SkillSwap}
      - JWT_AUDIENCE=${JWT_AUDIENCE:-SkillSwap}
      - JWT_EXPIRE=${JWT_EXPIRE:-60}
      - REDIS_CONNECTION_STRING=redis:6379
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USE_SSL=${SMTP_USE_SSL:-true}
      - SMS_PROVIDER=${SMS_PROVIDER:-twilio}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5006/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # ================== Database Services ==================
  postgres_userservice:
    image: postgres:15-alpine
    container_name: "skillswap-postgres-userservice"
    networks:
      - skillswap-network
    environment:
      POSTGRES_DB: userservice
    volumes:
      - postgres_userservice_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U skillswap -d userservice"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  postgres_skillservice:
    image: postgres:15-alpine
    container_name: "skillswap-postgres-skillservice"
    networks:
      - skillswap-network
    environment:
      POSTGRES_DB: skillservice
    volumes:
      - postgres_skillservice_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U skillswap -d skillservice"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  postgres_matchmakingservice:
    image: postgres:15-alpine
    container_name: "skillswap-postgres-matchmakingservice"
    networks:
      - skillswap-network
    environment:
      POSTGRES_DB: matchmakingservice
    volumes:
      - postgres_matchmakingservice_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U skillswap -d matchmakingservice"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  postgres_appointmentservice:
    image: postgres:15-alpine
    container_name: "skillswap-postgres-appointmentservice"
    networks:
      - skillswap-network
    environment:
      POSTGRES_DB: appointmentservice
    volumes:
      - postgres_appointmentservice_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U skillswap -d appointmentservice"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  postgres_videocallservice:
    image: postgres:15-alpine
    container_name: "skillswap-postgres-videocallservice"
    networks:
      - skillswap-network
    environment:
      POSTGRES_DB: videocallservice
    volumes:
      - postgres_videocallservice_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U skillswap -d videocallservice"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  postgres_notificationservice:
    image: postgres:15-alpine
    container_name: "skillswap-postgres-notificationservice"
    networks:
      - skillswap-network
    environment:
      POSTGRES_DB: notificationservice
    volumes:
      - postgres_notificationservice_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U skillswap -d notificationservice"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

# ================== Networks ==================
networks:
  skillswap-network:
    driver: bridge
    name: skillswap-network

# ================== Volumes ==================
volumes:
  redis_data:
    name: skillswap_redis_data
  rabbitmq_data:
    name: skillswap_rabbitmq_data
  postgres_userservice_data:
    name: skillswap_pg_userservice
  postgres_skillservice_data:
    name: skillswap_pg_skillservice
  postgres_matchmakingservice_data:
    name: skillswap_pg_matchmakingservice
  postgres_appointmentservice_data:
    name: skillswap_pg_appointmentservice
  postgres_videocallservice_data:
    name: skillswap_pg_videocallservice
  postgres_notificationservice_data:
    name: skillswap_pg_notificationservice